#! /bin/bash
#=====================================================================
# postinst script for: 
#
#						CLAWS MAIL
#
# This script executes after unpacking files from that archive and
# registering the product at the depot.
#
# The following environment variables can be used to obtain information
# about the current installation:
#   PRODUCT_ID: id of the current product
#   CLIENT_DATA_DIR: directory which contains the installed client data
#=====================================================================
# J. Boettge <boettge@mpi-halle.mpg.de>	2017-12-22 12:29:02 +0100
#=====================================================================


{{#ifdef_auto_download}}
AUTO_DOWNLOAD="true"
{{/ifdef_auto_download}}
{{^ifdef_auto_download}}
AUTO_DOWNLOAD="false"
{{/ifdef_auto_download}}

#LOGFILE=/tmp/${PRODUCT_ID}__opsi_package_install.log
LOGFILE={{O_INST_LOG}}

exec >> $LOGFILE
exec 2>&1
chgrp opsiadmin $LOGFILE
chmod g+rw $LOGFILE

echo "=================================================="
echo "${PRODUCT_ID} POSTINST LOG"
echo "=================================================="

SRC="${CLIENT_DATA_DIR}/../../source/${PRODUCT_ID##0_}"
DST="${CLIENT_DATA_DIR}/files"
# remove trailing "/" in path:
DST=${DST%\/}
ERR=0

### check for testing and DFN package:
P=${PRODUCT_ID}
[ "${P}" = "${P##0_}" ] &&  IS_TESTING=false || IS_TESTING=true
P=${P/#0_/}
[ "${P}" = "${P##dfn_}" ] && IS_DFN=false || IS_DFN=true


if [ $IS_DFN == true ]; then
	 [ ! -d "${DST}" ] && mkdir $DST
else
	### symlink files directory to ../../source/${PRODUCT_ID##0_} only
	### for non-DFN packages:
	if [ -h "${DST}" ]; then
		echo "Symlink to [${DST}] already exists. - Replacing"
		rm ${DST}
	fi
	
	if [ ! -d "${SRC}" ]; then	
		echo "Directory [${SRC}] does not exist. Try to create it."
		mkdir -m 750 ${SRC} && chgrp pcpatch ${SRC}
	fi

	if [ -d "${DST}" ]; then
		echo "Directory [${DST}] already exists!\nSkipping creation of symlink."
	elif [ -f "${DST}" ]; then
		echo "File [${DST}] already exists!\nSkipping creation of symlink."
	else
		ln -s ${SRC} ${DST}
	fi
fi


### restore custom directories
TMP_DIR=${CLIENT_DATA_DIR}/../${PRODUCT_ID}.tmp
if [ -d $TMP_DIR ]; then
	echo 'Restoring previous directories...'
	
	for DIRNAME in custom files; do
		echo "* [${DIRNAME}]"
		if [ -d $TMP_DIR/${DIRNAME} ]; then
			test -e $CLIENT_DATA_DIR/${DIRNAME} && rm -rf $CLIENT_DATA_DIR/${DIRNAME}
			echo -e "\tmoving $TMP_DIR/${DIRNAME} to $CLIENT_DATA_DIR/"
			mv $TMP_DIR/${DIRNAME} $CLIENT_DATA_DIR/ || exit 1	
		else
			echo -e "\tdoes not exist here"
		fi
	done
fi
echo "Removing temporary files..."
rm -rf $TMP_DIR


{{^ifdef_allinc}}
[ "${AUTO_DOWNLOAD}" != "true" ] && exit 0

echo "=================================================="
echo "Downloading required files from vendor"
date
echo "=================================================="
# http://www.claws-mail.org/win32/
# 	http://www.claws-mail.org/download.php?file=win32/claws-mail-3.16.0-1-32bit.exe
# 	http://www.claws-mail.org/download.php?file=win32/claws-mail-3.16.0-1-64bit.exe

VERSION=${PRODUCT_VERSION}
echo "Detected version for this package: ${VERSION}"
PROD="claws-mail"
BUILD="1"

BASE="http://www.claws-mail.org/download.php?file=win32/claws-mail-${VERSION}-${BUILD}-%%ARCH%%.exe"

CNT=0
WGET_OPTS="--max-redirect=2 --no-cookies "
FS_THRESHOLD=10000

download()
{	
	DL_URL=$1
	[ -n "$2" ] && PACKAGE=$2 || PACKAGE=`basename $DL_URL`
	
	let "CNT++"
	echo -e "Retrieving [$PACKAGE]\n\tfrom: [${DL_URL}]";
	if [ -f "${DST}/${PACKAGE}" ]; then
		echo -e "\tfile already exists"
	else
		eval wget ${WGET_OPTS} -nv "${DL_URL}" -O "${DST}/${PACKAGE}"
		if  [ ! -f "${DST}/${PACKAGE}" ]; then
			let "ERR+=1<<$CNT"
		else
			FILESIZE=$(stat -c%s "${DST}/${PACKAGE}")
			if [ "${FS_THRESHOLD}" -gt "${FILESIZE}" ]; then
				echo -e "*E*  file has an unusual size; assuming error page"
				rm -f "${DST}/${PACKAGE}"
				let "ERR+=1<<$CNT"
			else			
				chmod g+r "${DST}/${PACKAGE}"
			fi
		fi
	fi	
}


CNT=0
for ARCH in "32bit" "64bit"; do
	PKG_URL=${BASE//%%ARCH%%/$ARCH}
	PACKAGE="${PROD}_${ARCH}_${VERSION}.exe"
	download "${PKG_URL}"  "${PACKAGE}"
done
{{/ifdef_allinc}}

exit $ERR
